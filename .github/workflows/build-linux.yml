# This is a basic workflow to help you get started with Actions

name: build-linux

# Controls when the workflow will run
on:
  # this is a called workflow
  workflow_call:
    outputs:
      build-file:
        description: "The output of this build procsss"
        value: ${{ jobs.linux-build-job.outputs.install-file }}

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # Build the installer on mac
  linux-build-job:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    
    # Output
    outputs:
      install-file: ${{ steps.output-installer.outputs.filename }}

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      # Setup python
      - name: System Setup
        run: |
          pip3 install pyinstaller pyqt5 darkdetect

      # Build the installer
      - name: Build Linux Installer
        run: |
          pyinstaller --onefile --clean --name RTK_Uploader --noconsole --distpath=. --icon=RTK_Uploader/resource/RTK.ico --add-binary="RTK_Uploader/resource/RTK_Surveyor_Partitions_4MB.bin:." --add-binary="RTK_Uploader/resource/RTK_Surveyor_Partitions_16MB.bin:." --add-binary="RTK_Uploader/resource/RTK_Surveyor.ino.bootloader.bin:." --add-binary="RTK_Uploader/resource/boot_app0.bin:." --add-binary="RTK_Uploader/resource/RTK.png:." --add-data="RTK_Uploader/resource/*:resource/" RTK_Firmware_Uploader.py
          gzip RTK_Uploader
          mv RTK_Uploader.gz RTK_Uploader.linux.gz
          
      - uses: actions/upload-artifact@v3
        with:
          name: RTK_Uploader.linux.gz
          path: RTK_Uploader.linux.gz

      - id: output-installer
        run: echo "::set-output name=filename::RTK_Uploader.linux.gz"
        
        
