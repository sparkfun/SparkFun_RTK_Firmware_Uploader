# This is a basic workflow to help you get started with Actions

name: build-macos

# Controls when the workflow will run
on:
  # this is a called workflow
  workflow_call:
    outputs:
      build-file:
        description: "The output of this build procsss"
        value: ${{ jobs.macos-build-job.outputs.install-file }}

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # Build the installer on mac
  macos-build-job:
    # The type of runner that the job will run on
    runs-on: macos-latest
    
    # Output
    outputs:
      install-file: ${{ steps.output-installer.outputs.filename }}

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      # Setup python
      - name: System Setup
        run: |
          pip install pyinstaller Pillow pyqt5 darkdetect argparse intelhex esptool
          brew install create-dmg

      # Build the installer
      - name: Build Mac Installer
        run: |
          ESPTOOL_LOCATION=$(pip show esptool | grep "Location: " | cut -c 11- | tr -d '\n')
          ESPTOOL_TARGETS=$(echo "${ESPTOOL_LOCATION}/esptool/targets/stub_flasher/*:esptool/targets/stub_flasher/")
          pyinstaller --windowed -n RTKUploader --noconsole --distpath=. --icon=RTK_Firmware_Uploader/resource/RTK.ico --add-binary="RTK_Firmware_Uploader/resource/RTK_Surveyor_Partitions_4MB.bin:." --add-binary="RTK_Firmware_Uploader/resource/RTK_Surveyor_Partitions_16MB.bin:." --add-binary="RTK_Firmware_Uploader/resource/RTK_Surveyor.ino.bootloader.bin:." --add-binary="RTK_Firmware_Uploader/resource/boot_app0.bin:." --add-binary="RTK_Firmware_Uploader/resource/RTK.png:." --add-data="RTK_Firmware_Uploader/resource/*:resource/" --add-data="${ESPTOOL_TARGETS}" RTK_Firmware_Upload.py
          mkdir tmp
          mv "RTKUploader.app" "tmp/"
          create-dmg --volicon "RTK_Firmware_Uploader/resource/sparkdisk.icns" --background "RTK_Firmware_Uploader/resource/sfe_logo_med.png" --hide-extension "RTKUploader.app" --icon "RTKUploader.app" 100 100 --window-size 600 440 --app-drop-link 400 100 "RTKUploader.dmg" "tmp/"
          
      - uses: actions/upload-artifact@v3
        with:
          name: RTKUploader.dmg
          path: RTKUploader.dmg

      - id: output-installer
        run: echo "filename=RTKUploader.dmg" >> $GITHUB_OUTPUT
        
        
